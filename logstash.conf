input {	
	udp {
		port => 5550
		type => "traffic.apps"
	}
}
filter {

#	Extract fields from log and place into apps type
	if [type] == "traffic.apps" {
		dissect {
			mapping => {
				"message" => "%{?FUTURE_USE},%{panw.rcv_time_control_plane},%{?observer.serial_number},%{?Log Type},%{?panw.log_subtype},%{?FUTURE_USE},%{event.created},%{source.ip},%{destination.ip},%{?source.nat.ip},%{?destination.nat.ip},%{?panw.rule_name},%{source.user.name},%{?destination.user.name},%{network.application},%{?panw.virtual_system},%{source.zone},%{destination.zone},%{?panw.inbound_interface},%{?panw.outbound_interface},%{?panw.log_action},%{?FUTURE_USE},%{?panw.session_id},%{?event.repeat_count},%{source.port},%{destination.port},%{?source.nat.port},%{?destination.nat.port},%{?panw.flags},%{network.protocol},%{?event.action},%{?network.bytes},%{?destination.bytes},%{?source.bytes},%{?network.packets},%{panw.session_start_time},%{?event.duration},%{?url.category},%{?FUTURE_USE},%{?panw.sequence_number},%{?panw.action_flags},%{?source.geo.country_name},%{?destination.geo.country_name},%{?FUTURE_USE},%{?destination.packets},%{?source.packets},%{?panw.session_end_reason},%{?panw.device_group_hierarchy_level_1},%{?panw.device_group_hierarchy_level_2},%{?panw.device_group_hierarchy_level_3},%{?panw.device_group_hierarchy_level_4},%{?panw.virtual_system_name},%{observer.hostname},%{?panw.action_source},%{?panw.source_VM_UUID},%{?panw.destination_VM_UUID},%{?panw.tunnel_ID/IMSI},%{?panw.monitor_tag/IMEI},%{?panw.parent_session_ID},%{?msg}"
			}
		}

		clone {
			clones => ["traffic.peers"]
		}

#		Retrieve subnet, desired zone, and desired tag for source and destination IPs
		translate {
			field => "source.ip"
			destination => "source.subnet_zone_tag"
			dictionary_path => "/tmp/ip-subnet-tags.yaml"
			fallback => "0.0.0.0/0"
		}

		translate {
			field => "destination.ip"
			destination => "destination.subnet_zone_tag"
			dictionary_path => "/tmp/ip-subnet-tags.yaml"
			fallback => "0.0.0.0/0"
		}

#		Extract from source.subnet_zone_tag the following: source.subnet, source.desired_zone, and source.desired_tag
		dissect { mapping => { "source.subnet_zone_tag" => "%{source.subnet},%{source.desired_zone},%{source.desired_tag}" } }

		if ![source.subnet] { 
			mutate { 
				add_field => { 
					"source.subnet" => "%{source.subnet_zone_tag}"
					"source.desired_zone" => ""
					"source.desired_tag" => ""
				}
			}
		}

#		Extract from destination.subnet_zone_tag the following: destination.subnet, destination.desired_zone, and destination.desired_tag
		dissect { mapping => { "destination.subnet_zone_tag" => "%{destination.subnet},%{destination.desired_zone},%{destination.desired_tag}" } }

		if ![destination.subnet] {
			mutate {
				add_field => {
					"destination.subnet" => "%{destination.subnet_zone_tag}" 
					"destination.desired_zone" => ""
					"destination.desired_tag" => ""
				}
			}
		}

#		Fingerprint service flows from devices to server/port/proto
		if [source.ip] and [destination.ip] {
			fingerprint {
				concatenate_sources => true
				method => "SHA1"
				key => "paloaltonetworks"
				source => ["source.ip", "destination.ip", "destination.port", "network.protocol"]
				target => "fingerprint.service"
			}
		}

#		Fingerprint app flows from devices to server/port/proto/appID
		if [fingerprint.service] and [network.application] {
			fingerprint {
				concatenate_sources => true
				method => "SHA1"
				key => "paloaltonetworks"
				source => ["fingerprint.service", "network.application"]
				target => "fingerprint.app"
			}
		}

#		Fingerprint app flows from users to server/port/proto/appID
		if [source.user.name] and [network.application] {
			fingerprint {
				concatenate_sources => true
				method => "SHA1"
				key => "paloaltonetworks"
				source => ["source.user.name", "destination.ip", "destination.port", "network.protocol", "network.application"]
				target => "fingerprint.userapp"
			}
		}

#		Fingerprint peer hops with different FW in path (a hop)
		if [source.ip] and [destination.ip] {
			fingerprint {
				concatenate_sources => true
				method => "SHA1"
				key => "paloaltonetworks"
				source => ["source.ip", "destination.ip", "host", "observer.hostname"]
				target => "fingerprint.hop"
			}
		}

#		Fingerprint peer flows end-to-end (peers)
		if [source.ip] and [destination.ip] {
			fingerprint {
				concatenate_sources => true
				method => "SHA1"
				key => "paloaltonetworks"
				source => ["source.ip", "destination.ip"]
				target => "fingerprint.peer"
			}
		}

#		Get the applipedia risk and ports/protos defaults for this app
		translate {
			field => "network.application"
			destination => "AppDefaults"
			dictionary_path => "/tmp/applipedia.yaml"
			fallback => ""
		}

#		Separate the risk score from the application default ports
		dissect { mapping => { "AppDefaults" => "[%{network.application_deps}],%{network.application_risk},[%{network.application_AppDefaults}]" } }

#		Combine proto/port from log and check against applipedia defaults
		mutate { add_field => { "network.protoport" => "%{network.protocol}/%{destination.port}" } }

		if [network.protoport] in [network.application_AppDefaults] {
			mutate { add_field => { "network.application_MatchesDefault" => "True" } }
		} else {
			if "dynamic" in [network.application_AppDefaults] {
				mutate { add_field => { "network.application_MatchesDefault" => "True" } }
			} else {				
				mutate { add_field => { "network.application_MatchesDefault" => "False" } }
			}
		}

#		Add fields for user actions
		mutate { add_field => { "Acknowledged" => "False" } }
		mutate { add_field => { "Action Log" => "" } }
		mutate { add_field => { "Mark Interesting" => "http://192.168.55.162:9999/?srczone=%{source.zone}&desired_srczone=%{source.desired_zone}&desired_srctag=%{source.desired_tag}&srcip=%{source.ip}&srcnet=%{source.subnet}&srcuser=%{source.user.name}&dstzone=%{destination.zone}&dstip=%{destination.ip}&dstnet=%{destination.subnet}&desired_dstzone=%{destination.desired_zone}&desired_dsttag=%{destination.desired_tag}&dstport=%{destination.port}&service=%{network.protocol}-%{destination.port}&application=%{network.application}&appdefault=%{network.application_MatchesDefault}&appdefaultpps=%{network.application_AppDefaults}&fp_app=%{fingerprint.app}&fp_service=%{fingerprint.service}&docid=%{fingerprint.app}&apprisk=%{network.application_risk}&appdeps=%{network.application_deps}" } }
		mutate { add_field => { "Mark Uninteresting" => "http://192.168.55.162:9999/ack?docid=%{fingerprint.app}&value=True&action=Uninteresting" } }

#		Check to see if there are appslist entries that match fingerprint.service in the appslist index
#		if yes, append this app to the list
		elasticsearch {
			hosts => ["elasticsearch:9200"]
			index => "traffic.appslist"
			query => "fingerprint.service:%{fingerprint.service}"
#			Store the network.application value from the doc into a curlist
			result_size => 1
			fields => {
				"network.application" => "curlist"
			}
		}

#		Check if curlist is populated (there is at least one app on this service id)
#		If it is populated, add the app to the list (if it is not already there) and clone the events to appslist

		if [network.application] != "incomplete" and [network.application] != "insufficient-data" {
		if [curlist] {
			if [network.application] not in [curlist] {
				# This application is not found in the curlist entry so add it
				mutate { add_field => { "newlist" => "%{curlist},%{network.application}" } }
				clone {
					clones => ["traffic.appslist"]
				}
			}
		} else {
#			No curlist value, so there is no applist entry
#			Check to see if there is another entry with fingerprint.service in the apps index
#			and if there is another entry, create a new appslist entry
#			No need to worry about more than one entry, b/c no list yet
			elasticsearch {
				hosts => ["elasticsearch:9200"]
				index => "traffic.apps"
				query => "fingerprint.service:%{fingerprint.service}"
				result_size => 1
#				Store the network.application value from the doc into app list
				fields => {
					"network.application" => "curlist"
					"host" => "curhost"
				}
			}
			
#			Check if there is an app entry for this service
#			and if it is not the same, add both apps to a new appslist entry
			if [curlist] {
				if [network.application] != [curlist] {
					# This application is not the same as one already associated with same service fingerprint, so create a new list
					mutate { add_field => { "newlist" => "%{curlist},%{network.application}" } }
					clone {
						clones => ["traffic.appslist"]
					}
				}
#				Append host/device to host field
#				if [host] != [curhost] {
#					mutate { replace => { "host" => "%{curhost},%{host}" } }
#				}
			}
		}
		}
	}
#	End apps type processing, because clone might have been made and do not want to process against both

	if [type] == "traffic.peers" {

		prune { whitelist_names => [ "type","@timestamp","@version","fingerprint.peer","fingerprint.hop","source.ip","destination.ip","host","observer.hostname" ] }
		mutate { remove_field => [ "curhost","AppDefaults","network.application_AppDefaults","network.application_MatchesDefault","source.subnet_zone_tag","destination.subnet_zone_tag","newlist" ] }

	}

#	Contiue processing the original and clone types separately
	if [type] == "traffic.apps" {

#		Mark that this entry is not a list
		mutate { add_field => { "is_list" => "False" } }
#		Remove any fields you do not want
		mutate { remove_field => [ "message","msg","curlist","newlist","curhost","AppDefaults","fingerprint.hop" ] }

	}
#	End apps type processing

#	If an appslist entry was created (cloned) then do final processing on it
	if [type] == "traffic.appslist" {

		mutate { replace => { "network.application" => "%{newlist}" } }

#		Mark that this entry is not a list
		mutate { add_field => { "is_list" => "True" } }

		prune { whitelist_names => [ "type","@timestamp","@version","fingerprint.service","fingerprint.peer","source.ip","source.subnet","destination.ip","destination.subnet","destination.port","network.protocol","is_list","network.application" ] }
		mutate { remove_field => [ "network.application_AppDefaults","AppDefaults","network.application_MatchesDefault","AppDefault","source.subnet_zone_tag","destination.subnet_zone_tag","newlist","fingerprint.hop" ] }
	
	}
#	End appslist type processing


# End all event type processing

}

output {
	if [type] == "traffic.apps" {
		elasticsearch {
			index => "traffic.apps"
			hosts => "elasticsearch:9200"
#			Setting document ID to fingerprint will dedup
                        document_id => "%{fingerprint.app}"
#			set action to CREATE if you dont want to write over existing document
#			We already dedup with the fingerprint as docid, so shouldnt need to do CREATE action
#                        action => "create"
		}
	}
        if [type] == "traffic.appslist" {
		elasticsearch {
                        index => "traffic.appslist"
                        hosts => "elasticsearch:9200"
                        document_id => "%{fingerprint.service}"
#                        action => "create"
                }
	}
        if [type] == "traffic.userapps" {
		elasticsearch {
                        index => "traffic.userapps"
                        hosts => "elasticsearch:9200"
                        document_id => "%{fingerprint.userapp}"
                        action => "create"
                }
	}
        if [type] == "traffic.peers" {
		elasticsearch {
                        index => "traffic.peers"
                        hosts => "elasticsearch:9200"
                        document_id => "%{fingerprint.hop}"
#                        action => "create"
                }
	}
#stdout { codec => rubydebug }
}
